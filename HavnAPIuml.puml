@startuml

class Agv {
    -Container: container
    -Status: status
}
class Anchorage extends ShipPlaces {
    -ShipQueue: Queue<Ship>
    -MoveShipFromQueue(): Ship
    -AddShipToQueue(Ship ship): void
    -ReturnAllShips() : List<Ship>
    -AvalibleSpace() : bool
}
class Column{
    -StackedContainers : Collection<Stack<Container>>
    -AmountContainers : int
    -MaxContainers: int
    -MaxHeight : int
    -Type : ContainerType

    -AddContainer(Container container) : void
    -InitializeContainerType(Container container) : void
    -IsContainerLongOverdue(Datetime current, int daysInStorageLimit) : bool
    -RetrieveOverdueContainer(Datetime current, int daysInStorageLimit): Container
}
class ContainerSpace {
    +name : string
    -storageColumns : Collection<StorageColumns>
    -AGVs : Collection<AGV>
    -truckPickupPercentage : double
    -daysInStorageLimit : int

    +AddStorageColumn(int amount, int numberOfCranes,  int length, int width, int height) : void
    -OverdueContainers(DateTime currentDate, DateTime end) : void
}
class Dockspace extends ShipPlaces {
    AddShip(Ship ship) : void
}
abstract class ShipPlaces {
    {static} -next: int
    +id: int
    +name: string
    +spaces: int
    +shipType : ShipType
    -Ships: List<Ship>
    -Finished: List<Ship>
    +DepartingHarbour: EventHandler<DepartingHarbourArgs>

    -AddShip(Ship ship): void
    -MoveShip(int id): Ship
    -ReturnRepeatingShips(): List<Ship>
    -ReturnAllShips(): List<Ship>
    -AvailableSpace(): bool
    -RaiseDepartingHarbour(Ship ship):void
}

class StorageColumn{
    -Columns: Collection<Column>
    -numberOfCranes: int
}
class Unloadingspace extends ShipPlaces {
    -cranes: int
    -truckPickupPercentage : double
    -containerHistory : Collection<HistoryService>
    -targetContainerSpace : ContainerSpace

    -UnloadContainer(DateTime currentDateTime, DateTime end) : int
}
class Container {
    {static} - next: int
    +id: int
    -histories: Collection<HistoryService>
    +type: ContainerType
}
class HistoryService {
    +name: string
    +time: DateTime
    +description:string

    +ToString(): string
}

class Ship {
    {static} -next : int
    +id: int
    +shipName: string
    +placeDestination: ShipPlaces
    +spesificDateTime: Nullable<Datetime>
    +weekly: Nullable<DayOfWeek>
    +daily: Nullable<TimeOnly>
    -currentRepeatedDateTime: Nullable<DateTime>
    -Repeat: bool
    +status: Status
    -AmountLongContainers: int
    -AmountShortContainers: int
    +TotalContainers:int
    +type:ShipType
    -containers: Queue<Container>
    +histories: Collection<HistoryService>
    +currentLocation: string

    -MakeContainers(): void
    -MoveContainer(): Container
    -AddHistory(HistoryService history): void
    -RemoveHistory(HistoryService history): void
}

class Harbour implements IHarbour {
    +name: string
    +shipHistory: List<HistoryService>
    +containerHistory: List<HistoryService>
    +shipPlacesList: List<ShipPlaces>
    +shipsList: List<Ship>
    -anchorageHarbour : Anchorage
    +arrivedToHarbour: EventHandler<ArrivedToHarbourArgs>
    +departingAnchorage: EventHandler<DepartingAnchorageArgs>
    +midnightStatusUpdate: EventHandler<MidnightStatusUpdateArgs>
    +movingToAnchorage: EventHandler<MovingToAnchorageArgs>
    +reachedDestination: EventHandler<ReachedDestinationArgs>
    +shipSailing: EventHandler<ShipSailingArgs>

    +RemoveShip(Ship ship): void
    +RemoveAllShip(): void
    +AddShipPlace(ShipPlace shipPlaces): void
    +AddAllShipPlaces(List<ShipPlaces> shipPlaces): void
    +AddShip(Ship ship): void
    +AddAllShips(List<Ship> allships): void
    +Run(DateTime start, DateTime end): void
    -MoveShip(Ship theShip): Ship
    -AddSpecificPlace(int shipPlaceId, Ship ship): void
    -AddShipToAnchorage(Ship ship, DateTime current): void
    -MoveShipFromAnchorage(ShipPlaces shipPlaces, DateTime current): void
    -getAllReadOnlyShips(): IReadOnlyCollection<Ship>
    -RaiseArrivedToHarbour(Ship ship):void
    -RaiseDepartingAnchorage(Ship ship): void
    -RaiseMidnightStatus(IReadOnlyCollection<Ship> ships): void
    -RaiseMovingToAnchorage(Ship ship): void
    -RaiseReachedDestination(Ship ship): void
    -RaiseShipSailing(Ship ship): void
}
interface IHarbour {
    +Run(DateTime start, DateTime end): void
    +RemoveShip(Ship ship): void
    +RemoveAllShip(): void
    +AddShipPlace(ShipPlaces shipPlace): void
    +AddAllShipPlaces(List<ShipPlaces> shipPlaces): void
    +AddShip(Ship ship): void
    +AddAllShips(List<Ship> allships): void
}
enum ContainerType{
    None,
    Long,
    Short
}

enum ShipType{
    All,
    Cargo,
    Passanger,
    Tankship
}
enum Status{
    Avalible,
    Busy,
    Finished
}


ShipType ---> Ship
Harbour "1" *--- ShipPlaces
Harbour "1" *-- Ship
ShipPlaces "1" *-- Ship
Ship "1" *-- Container
Ship "1" *-- "many" HistoryService
Container "1" *--- HistoryService
ContainerSpace ---> Unloadingspace
Agv --o ContainerSpace
Column --o StorageColumn
StorageColumn --o ContainerSpace
ContainerType -----> Container
ContainerType -->Column
Status --> Ship
Status --> Agv









@enduml